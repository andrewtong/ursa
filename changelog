#v3.0

TO DO

Scoring system altered to act logarithmically.  What this means is that when the program registers a score value of for 
example '70', then its likely going to be a good match.  That being said, a score of '50' to '60' is to be registered as a
questionable match, and is likely to be incorrect.  What this means is that this 10 to 20 point jump is *a lot* more of a
significant jump than say from '80' to '100'.  To adjust for this, I wanted to reduce the number of midranged scores and
put out a more certain 'yes' or 'no' type answer.  The scoring system is still a bit imperfect, but I feel that this one
works a bit better.
*The scoring system is being worked on URSA-enhanced, once a good match is found, it will be implemented onto URSA.*

Changes from v2.0 to v3.0
Many indexing errors have been corrected. One of the major bugs was that occasionally a 'double index jump' would occur because
the index counter would increment by one, while the substring length would decrease by one, resulting in substr[index] being 
one letter ahead. This was corrected and there accuracy checks for latter letter partitions should now be a lot more accurate.

Because URSA is almost fully functional, URSA-enhanced will start to be worked on to attempt to increase performance.  See
the URSA-enhanced repository for the direction of that project.

Better documentation has been added to explain how each algorithm works.

Changes from v1.0 to v2.0
URSA can now perform letter swapping, find missing letters, remove extra letters, or perform a combination of any of the above
intelligently! It attempts to 'correct' potential word candidates and utilizes a detailed scoring system to determine to keep
track of the number of changes made.  Too many changes and a word no longer becomes a candidiate, but if the score is low enough
it will be recognized as the correct word.

Scoring system now adjusts to the severity of the mistake, and scores big mistakes (i.e. missing two letters) significantly 
higher than minor mistakes ('letter swap where both letters are correct').  URSA can also now correctly score words that are
missing the first few letters correctly, and when performing the word correction it will take into account missing letters
at the start.  (e.x. 'attern', 'pattern' : The missing p is accounted for at the start and does transfer over resulting in
an incorrect scoring.)

Runtime sigificantly expedited through a number of corrections to reduce redundancies, URSA is capable of predicting accurately
and early on when a word will be incorrect and is quick to remove it.

Majority of indexing errors have been fixed, and indexing errors are accounted for and properly scored for! (They only
occur when the length of the word in the string pattern is shortern than the length of the substring and are completely
accounted for when computing the likeliness of any two words matching.)

Minimum partition length when splitting the string pattern is going to be the of length n, where n is the length of the
substring.  This is important because it allows the program to check for words that have two instances of the same letter
accurately (e.x. firefighter) without returning a imperfect score.

